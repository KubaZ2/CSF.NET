using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System.Reflection;

namespace CSF.Hosting
{
    /// <summary>
    ///     Represents a stream listener responsible for receiving and handling commands from less straight forward sources.
    /// </summary>
    /// <typeparam name="T">The framework to implement in this service.</typeparam>
    /// <typeparam name="TContext">The context that will be generated by the service.</typeparam>
    public abstract class HostedCommandService<T, TContext> : IHostedCommandService
        where T : ICommandFramework where TContext : IContext
    {
        /// <summary>
        ///     Represents the framework responsible for executing commands.
        /// </summary>
        public T Framework { get; }

        /// <inheritdoc/>
        public IServiceProvider Services { get; }

        /// <summary>
        ///     Represents a <see cref="Microsoft.Extensions.Logging"/> counterpart to the internal <see cref="CommandFramework.Logger"/> and resolves through the intended stream at logging configuration.
        /// </summary>
        public ILogger<T> Logger { get; }

        /// <summary>
        ///     Creates a new <see cref="HostedCommandService{T, TContext}"/> with provided services.
        /// </summary>
        /// <param name="framework"></param>
        /// <param name="collection"></param>
        /// <param name="logger"></param>
        public HostedCommandService(T framework, IServiceProvider collection, ILogger<T> logger)
        {
            Framework = framework;

            Framework.Logger.SendAction = async (x) => await LogAsync(x);

            Services = collection;
            Logger = logger;
        }

        /// <inheritdoc/>
        public async Task StartAsync(CancellationToken cancellationToken)
        {
            await Framework.RunAsync(true, cancellationToken)
                .ConfigureAwait(false);
        }

        /// <inheritdoc/>
        public async Task StopAsync(CancellationToken cancellationToken)
        {
            await Task.CompletedTask;
        }

        /// <summary>
        ///     Mutates inbound logs from the <see cref="CommandFramework.Logger"/> into its <see cref="ILogger{TCategoryName}"/> counterpart.
        /// </summary>
        /// <param name="log">The log message to transform.</param>
        /// <returns>An asynchronous <see cref="Task"/> with no return type.</returns>
        protected virtual Task LogAsync(Log log)
        {
            Logger.Log((Microsoft.Extensions.Logging.LogLevel)log.LogLevel, log.Exception, "{}", log.Value);

            return Task.CompletedTask;
        }
    }
}
